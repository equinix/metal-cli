// Copyright Â© 2018 Jasmin Gacic <jasmin@stackpointcloud.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package twofa

import (
	"context"
	"fmt"

	"github.com/spf13/cobra"
)

func (c *Client) Enable() *cobra.Command {
	var token string
	var sms, app bool

	// enable2faCmd represents the enable2fa command
	enable2faCmd := &cobra.Command{
		Use:   `enable (-s | -a) --code <OTP_code>`,
		Short: "Enables two factor authentication.",
		Long:  "Enables two-factor authentication on the current user's account. Two-factor auth is available either via SMS or an application. A current OPT code is required, which can be generated by the 2fa receive command.",
		Example: `  # Enable two factor authentication via SMS.
  metal 2fa enable -s -c <OTP_code>

  # Enable two factor authentication via an application.
  metal 2fa enable -a -c <OTP_code>`,
		Args: cobra.NoArgs,
		RunE: func(cmd *cobra.Command, args []string) error {
			if sms == app {
				return fmt.Errorf("either sms or app should be set")
			}

			cmd.SilenceUsage = true
			if sms {
				_, err := c.TwoFAService.EnableTfaSms(context.Background()).XOtpToken(token).Execute()
				if err != nil {
					return fmt.Errorf("Could not enable Two-Factor Authentication: %w", err)
				}
			} else if app {
				_, err := c.TwoFAService.EnableTfaApp(context.Background()).XOtpToken(token).Execute()
				if err != nil {
					return fmt.Errorf("Could not enable Two-Factor Authentication: %w", err)
				}
			}
			fmt.Println("Two factor authentication successfully enabled.")
			return nil
		},
	}

	enable2faCmd.Flags().BoolVarP(&sms, "sms", "s", false, "Enables two-factor authentication using SMS on the current user's account.")
	enable2faCmd.Flags().BoolVarP(&app, "app", "a", false, "Enables two-factor authentication using an application on the current user's account.")
	enable2faCmd.Flags().StringVarP(&token, "code", "c", "", "Two-factor authentication code that is provided by a request to the 2fa receive command.")
	_ = enable2faCmd.MarkFlagRequired("code")
	return enable2faCmd
}
