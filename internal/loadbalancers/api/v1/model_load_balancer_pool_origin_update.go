/*
Load Balancer Management API

Load Balancer Management API is an API for managing load balancers.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the LoadBalancerPoolOriginUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadBalancerPoolOriginUpdate{}

// LoadBalancerPoolOriginUpdate struct for LoadBalancerPoolOriginUpdate
type LoadBalancerPoolOriginUpdate struct {
	// A name for the origin
	Name *string `json:"name,omitempty"`
	// IP address of the origin
	Target     *string                           `json:"target,omitempty"`
	PortNumber *LoadBalancerPoolOriginPortNumber `json:"port_number,omitempty"`
	// If the origin is active
	Active               *bool `json:"active,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LoadBalancerPoolOriginUpdate LoadBalancerPoolOriginUpdate

// NewLoadBalancerPoolOriginUpdate instantiates a new LoadBalancerPoolOriginUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadBalancerPoolOriginUpdate() *LoadBalancerPoolOriginUpdate {
	this := LoadBalancerPoolOriginUpdate{}
	return &this
}

// NewLoadBalancerPoolOriginUpdateWithDefaults instantiates a new LoadBalancerPoolOriginUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadBalancerPoolOriginUpdateWithDefaults() *LoadBalancerPoolOriginUpdate {
	this := LoadBalancerPoolOriginUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LoadBalancerPoolOriginUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerPoolOriginUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LoadBalancerPoolOriginUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LoadBalancerPoolOriginUpdate) SetName(v string) {
	o.Name = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *LoadBalancerPoolOriginUpdate) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerPoolOriginUpdate) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *LoadBalancerPoolOriginUpdate) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *LoadBalancerPoolOriginUpdate) SetTarget(v string) {
	o.Target = &v
}

// GetPortNumber returns the PortNumber field value if set, zero value otherwise.
func (o *LoadBalancerPoolOriginUpdate) GetPortNumber() LoadBalancerPoolOriginPortNumber {
	if o == nil || IsNil(o.PortNumber) {
		var ret LoadBalancerPoolOriginPortNumber
		return ret
	}
	return *o.PortNumber
}

// GetPortNumberOk returns a tuple with the PortNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerPoolOriginUpdate) GetPortNumberOk() (*LoadBalancerPoolOriginPortNumber, bool) {
	if o == nil || IsNil(o.PortNumber) {
		return nil, false
	}
	return o.PortNumber, true
}

// HasPortNumber returns a boolean if a field has been set.
func (o *LoadBalancerPoolOriginUpdate) HasPortNumber() bool {
	if o != nil && !IsNil(o.PortNumber) {
		return true
	}

	return false
}

// SetPortNumber gets a reference to the given LoadBalancerPoolOriginPortNumber and assigns it to the PortNumber field.
func (o *LoadBalancerPoolOriginUpdate) SetPortNumber(v LoadBalancerPoolOriginPortNumber) {
	o.PortNumber = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *LoadBalancerPoolOriginUpdate) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerPoolOriginUpdate) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *LoadBalancerPoolOriginUpdate) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *LoadBalancerPoolOriginUpdate) SetActive(v bool) {
	o.Active = &v
}

func (o LoadBalancerPoolOriginUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadBalancerPoolOriginUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.PortNumber) {
		toSerialize["port_number"] = o.PortNumber
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LoadBalancerPoolOriginUpdate) UnmarshalJSON(bytes []byte) (err error) {
	varLoadBalancerPoolOriginUpdate := _LoadBalancerPoolOriginUpdate{}

	err = json.Unmarshal(bytes, &varLoadBalancerPoolOriginUpdate)

	if err != nil {
		return err
	}

	*o = LoadBalancerPoolOriginUpdate(varLoadBalancerPoolOriginUpdate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "target")
		delete(additionalProperties, "port_number")
		delete(additionalProperties, "active")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLoadBalancerPoolOriginUpdate struct {
	value *LoadBalancerPoolOriginUpdate
	isSet bool
}

func (v NullableLoadBalancerPoolOriginUpdate) Get() *LoadBalancerPoolOriginUpdate {
	return v.value
}

func (v *NullableLoadBalancerPoolOriginUpdate) Set(val *LoadBalancerPoolOriginUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadBalancerPoolOriginUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadBalancerPoolOriginUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadBalancerPoolOriginUpdate(val *LoadBalancerPoolOriginUpdate) *NullableLoadBalancerPoolOriginUpdate {
	return &NullableLoadBalancerPoolOriginUpdate{value: val, isSet: true}
}

func (v NullableLoadBalancerPoolOriginUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadBalancerPoolOriginUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
