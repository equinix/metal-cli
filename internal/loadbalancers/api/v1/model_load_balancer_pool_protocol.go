/*
Load Balancer Management API

Load Balancer Management API is an API for managing load balancers.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// LoadBalancerPoolProtocol the model 'LoadBalancerPoolProtocol'
type LoadBalancerPoolProtocol string

// List of LoadBalancerPoolProtocol
const (
	LOADBALANCERPOOLPROTOCOL_TCP LoadBalancerPoolProtocol = "tcp"
	LOADBALANCERPOOLPROTOCOL_UDP LoadBalancerPoolProtocol = "udp"
)

// All allowed values of LoadBalancerPoolProtocol enum
var AllowedLoadBalancerPoolProtocolEnumValues = []LoadBalancerPoolProtocol{
	"tcp",
	"udp",
}

func (v *LoadBalancerPoolProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LoadBalancerPoolProtocol(value)
	for _, existing := range AllowedLoadBalancerPoolProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LoadBalancerPoolProtocol", value)
}

// NewLoadBalancerPoolProtocolFromValue returns a pointer to a valid LoadBalancerPoolProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLoadBalancerPoolProtocolFromValue(v string) (*LoadBalancerPoolProtocol, error) {
	ev := LoadBalancerPoolProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LoadBalancerPoolProtocol: valid values are %v", v, AllowedLoadBalancerPoolProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LoadBalancerPoolProtocol) IsValid() bool {
	for _, existing := range AllowedLoadBalancerPoolProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LoadBalancerPoolProtocol value
func (v LoadBalancerPoolProtocol) Ptr() *LoadBalancerPoolProtocol {
	return &v
}

type NullableLoadBalancerPoolProtocol struct {
	value *LoadBalancerPoolProtocol
	isSet bool
}

func (v NullableLoadBalancerPoolProtocol) Get() *LoadBalancerPoolProtocol {
	return v.value
}

func (v *NullableLoadBalancerPoolProtocol) Set(val *LoadBalancerPoolProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadBalancerPoolProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadBalancerPoolProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadBalancerPoolProtocol(val *LoadBalancerPoolProtocol) *NullableLoadBalancerPoolProtocol {
	return &NullableLoadBalancerPoolProtocol{value: val, isSet: true}
}

func (v NullableLoadBalancerPoolProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadBalancerPoolProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
