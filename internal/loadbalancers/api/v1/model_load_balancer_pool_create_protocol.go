/*
Load Balancer Management API

Load Balancer Management API is an API for managing load balancers.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// LoadBalancerPoolCreateProtocol - Protocol to use for pool
type LoadBalancerPoolCreateProtocol struct {
	LoadBalancerPoolProtocol *LoadBalancerPoolProtocol
}

// LoadBalancerPoolProtocolAsLoadBalancerPoolCreateProtocol is a convenience function that returns LoadBalancerPoolProtocol wrapped in LoadBalancerPoolCreateProtocol
func LoadBalancerPoolProtocolAsLoadBalancerPoolCreateProtocol(v *LoadBalancerPoolProtocol) LoadBalancerPoolCreateProtocol {
	return LoadBalancerPoolCreateProtocol{
		LoadBalancerPoolProtocol: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *LoadBalancerPoolCreateProtocol) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LoadBalancerPoolProtocol
	err = newStrictDecoder(data).Decode(&dst.LoadBalancerPoolProtocol)
	if err == nil {
		jsonLoadBalancerPoolProtocol, _ := json.Marshal(dst.LoadBalancerPoolProtocol)
		if string(jsonLoadBalancerPoolProtocol) == "{}" { // empty struct
			dst.LoadBalancerPoolProtocol = nil
		} else {
			match++
		}
	} else {
		dst.LoadBalancerPoolProtocol = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LoadBalancerPoolProtocol = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LoadBalancerPoolCreateProtocol)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LoadBalancerPoolCreateProtocol)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LoadBalancerPoolCreateProtocol) MarshalJSON() ([]byte, error) {
	if src.LoadBalancerPoolProtocol != nil {
		return json.Marshal(&src.LoadBalancerPoolProtocol)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LoadBalancerPoolCreateProtocol) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.LoadBalancerPoolProtocol != nil {
		return obj.LoadBalancerPoolProtocol
	}

	// all schemas are nil
	return nil
}

type NullableLoadBalancerPoolCreateProtocol struct {
	value *LoadBalancerPoolCreateProtocol
	isSet bool
}

func (v NullableLoadBalancerPoolCreateProtocol) Get() *LoadBalancerPoolCreateProtocol {
	return v.value
}

func (v *NullableLoadBalancerPoolCreateProtocol) Set(val *LoadBalancerPoolCreateProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadBalancerPoolCreateProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadBalancerPoolCreateProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadBalancerPoolCreateProtocol(val *LoadBalancerPoolCreateProtocol) *NullableLoadBalancerPoolCreateProtocol {
	return &NullableLoadBalancerPoolCreateProtocol{value: val, isSet: true}
}

func (v NullableLoadBalancerPoolCreateProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadBalancerPoolCreateProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
