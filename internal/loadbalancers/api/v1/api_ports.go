/*
Load Balancer Management API

Load Balancer Management API is an API for managing load balancers.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PortsApiService PortsApi service
type PortsApiService service

type ApiCreateLoadBalancerPortRequest struct {
	ctx                    context.Context
	ApiService             *PortsApiService
	loadBalancerID         string
	loadBalancerPortCreate *LoadBalancerPortCreate
}

func (r ApiCreateLoadBalancerPortRequest) LoadBalancerPortCreate(loadBalancerPortCreate LoadBalancerPortCreate) ApiCreateLoadBalancerPortRequest {
	r.loadBalancerPortCreate = &loadBalancerPortCreate
	return r
}

func (r ApiCreateLoadBalancerPortRequest) Execute() (*ResourceCreatedResponse, *http.Response, error) {
	return r.ApiService.CreateLoadBalancerPortExecute(r)
}

/*
CreateLoadBalancerPort Create a load balancer port.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param loadBalancerID ID of the load balancer
	@return ApiCreateLoadBalancerPortRequest
*/
func (a *PortsApiService) CreateLoadBalancerPort(ctx context.Context, loadBalancerID string) ApiCreateLoadBalancerPortRequest {
	return ApiCreateLoadBalancerPortRequest{
		ApiService:     a,
		ctx:            ctx,
		loadBalancerID: loadBalancerID,
	}
}

// Execute executes the request
//
//	@return ResourceCreatedResponse
func (a *PortsApiService) CreateLoadBalancerPortExecute(r ApiCreateLoadBalancerPortRequest) (*ResourceCreatedResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceCreatedResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortsApiService.CreateLoadBalancerPort")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/loadbalancers/{loadBalancerID}/ports"
	localVarPath = strings.Replace(localVarPath, "{"+"loadBalancerID"+"}", url.PathEscape(parameterValueToString(r.loadBalancerID, "loadBalancerID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.loadBalancerPortCreate == nil {
		return localVarReturnValue, nil, reportError("loadBalancerPortCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.loadBalancerPortCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteLoadBalancerPortRequest struct {
	ctx                context.Context
	ApiService         *PortsApiService
	loadBalancerPortID string
}

func (r ApiDeleteLoadBalancerPortRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLoadBalancerPortExecute(r)
}

/*
DeleteLoadBalancerPort Delete a load balancer port.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param loadBalancerPortID ID of the load balancer port
	@return ApiDeleteLoadBalancerPortRequest
*/
func (a *PortsApiService) DeleteLoadBalancerPort(ctx context.Context, loadBalancerPortID string) ApiDeleteLoadBalancerPortRequest {
	return ApiDeleteLoadBalancerPortRequest{
		ApiService:         a,
		ctx:                ctx,
		loadBalancerPortID: loadBalancerPortID,
	}
}

// Execute executes the request
func (a *PortsApiService) DeleteLoadBalancerPortExecute(r ApiDeleteLoadBalancerPortRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortsApiService.DeleteLoadBalancerPort")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/loadbalancers/ports/{loadBalancerPortID}"
	localVarPath = strings.Replace(localVarPath, "{"+"loadBalancerPortID"+"}", url.PathEscape(parameterValueToString(r.loadBalancerPortID, "loadBalancerPortID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetLoadBalancerPortRequest struct {
	ctx            context.Context
	ApiService     *PortsApiService
	loadBalancerID string
	portNumber     int32
}

func (r ApiGetLoadBalancerPortRequest) Execute() (*LoadBalancerPort, *http.Response, error) {
	return r.ApiService.GetLoadBalancerPortExecute(r)
}

/*
GetLoadBalancerPort Gets a load balancer port by ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param loadBalancerID ID of the load balancer
	@param portNumber Port number
	@return ApiGetLoadBalancerPortRequest
*/
func (a *PortsApiService) GetLoadBalancerPort(ctx context.Context, loadBalancerID string, portNumber int32) ApiGetLoadBalancerPortRequest {
	return ApiGetLoadBalancerPortRequest{
		ApiService:     a,
		ctx:            ctx,
		loadBalancerID: loadBalancerID,
		portNumber:     portNumber,
	}
}

// Execute executes the request
//
//	@return LoadBalancerPort
func (a *PortsApiService) GetLoadBalancerPortExecute(r ApiGetLoadBalancerPortRequest) (*LoadBalancerPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LoadBalancerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortsApiService.GetLoadBalancerPort")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/loadbalancers/{loadBalancerID}/ports/{portNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"loadBalancerID"+"}", url.PathEscape(parameterValueToString(r.loadBalancerID, "loadBalancerID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"portNumber"+"}", url.PathEscape(parameterValueToString(r.portNumber, "portNumber")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListLoadBalancerPortsRequest struct {
	ctx            context.Context
	ApiService     *PortsApiService
	loadBalancerID string
}

func (r ApiListLoadBalancerPortsRequest) Execute() (*LoadBalancerPortCollection, *http.Response, error) {
	return r.ApiService.ListLoadBalancerPortsExecute(r)
}

/*
ListLoadBalancerPorts Gets the load balancer's ports.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param loadBalancerID ID of the load balancer
	@return ApiListLoadBalancerPortsRequest
*/
func (a *PortsApiService) ListLoadBalancerPorts(ctx context.Context, loadBalancerID string) ApiListLoadBalancerPortsRequest {
	return ApiListLoadBalancerPortsRequest{
		ApiService:     a,
		ctx:            ctx,
		loadBalancerID: loadBalancerID,
	}
}

// Execute executes the request
//
//	@return LoadBalancerPortCollection
func (a *PortsApiService) ListLoadBalancerPortsExecute(r ApiListLoadBalancerPortsRequest) (*LoadBalancerPortCollection, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LoadBalancerPortCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortsApiService.ListLoadBalancerPorts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/loadbalancers/{loadBalancerID}/ports"
	localVarPath = strings.Replace(localVarPath, "{"+"loadBalancerID"+"}", url.PathEscape(parameterValueToString(r.loadBalancerID, "loadBalancerID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateLoadBalancerPortRequest struct {
	ctx                    context.Context
	ApiService             *PortsApiService
	loadBalancerPortID     string
	loadBalancerPortUpdate *LoadBalancerPortUpdate
}

func (r ApiUpdateLoadBalancerPortRequest) LoadBalancerPortUpdate(loadBalancerPortUpdate LoadBalancerPortUpdate) ApiUpdateLoadBalancerPortRequest {
	r.loadBalancerPortUpdate = &loadBalancerPortUpdate
	return r
}

func (r ApiUpdateLoadBalancerPortRequest) Execute() (*LoadBalancerPort, *http.Response, error) {
	return r.ApiService.UpdateLoadBalancerPortExecute(r)
}

/*
UpdateLoadBalancerPort Update a load balancer port.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param loadBalancerPortID ID of the load balancer port
	@return ApiUpdateLoadBalancerPortRequest
*/
func (a *PortsApiService) UpdateLoadBalancerPort(ctx context.Context, loadBalancerPortID string) ApiUpdateLoadBalancerPortRequest {
	return ApiUpdateLoadBalancerPortRequest{
		ApiService:         a,
		ctx:                ctx,
		loadBalancerPortID: loadBalancerPortID,
	}
}

// Execute executes the request
//
//	@return LoadBalancerPort
func (a *PortsApiService) UpdateLoadBalancerPortExecute(r ApiUpdateLoadBalancerPortRequest) (*LoadBalancerPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LoadBalancerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortsApiService.UpdateLoadBalancerPort")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/loadbalancers/ports/{loadBalancerPortID}"
	localVarPath = strings.Replace(localVarPath, "{"+"loadBalancerPortID"+"}", url.PathEscape(parameterValueToString(r.loadBalancerPortID, "loadBalancerPortID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.loadBalancerPortUpdate == nil {
		return localVarReturnValue, nil, reportError("loadBalancerPortUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.loadBalancerPortUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
