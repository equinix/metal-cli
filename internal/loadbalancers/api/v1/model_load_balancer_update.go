/*
Load Balancer Management API

Load Balancer Management API is an API for managing load balancers.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the LoadBalancerUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadBalancerUpdate{}

// LoadBalancerUpdate struct for LoadBalancerUpdate
type LoadBalancerUpdate struct {
	// Name of the load balancer
	Name *string `json:"name,omitempty"`
	// Add ports to load balancer
	AddPortIds []string `json:"add_port_ids,omitempty"`
	// Removed ports from load balancer
	RemovePortIds []string `json:"remove_port_ids,omitempty"`
	// Clear all ports from load balancer
	ClearPorts           *bool `json:"clear_ports,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LoadBalancerUpdate LoadBalancerUpdate

// NewLoadBalancerUpdate instantiates a new LoadBalancerUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadBalancerUpdate() *LoadBalancerUpdate {
	this := LoadBalancerUpdate{}
	return &this
}

// NewLoadBalancerUpdateWithDefaults instantiates a new LoadBalancerUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadBalancerUpdateWithDefaults() *LoadBalancerUpdate {
	this := LoadBalancerUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LoadBalancerUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LoadBalancerUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LoadBalancerUpdate) SetName(v string) {
	o.Name = &v
}

// GetAddPortIds returns the AddPortIds field value if set, zero value otherwise.
func (o *LoadBalancerUpdate) GetAddPortIds() []string {
	if o == nil || IsNil(o.AddPortIds) {
		var ret []string
		return ret
	}
	return o.AddPortIds
}

// GetAddPortIdsOk returns a tuple with the AddPortIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerUpdate) GetAddPortIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AddPortIds) {
		return nil, false
	}
	return o.AddPortIds, true
}

// HasAddPortIds returns a boolean if a field has been set.
func (o *LoadBalancerUpdate) HasAddPortIds() bool {
	if o != nil && !IsNil(o.AddPortIds) {
		return true
	}

	return false
}

// SetAddPortIds gets a reference to the given []string and assigns it to the AddPortIds field.
func (o *LoadBalancerUpdate) SetAddPortIds(v []string) {
	o.AddPortIds = v
}

// GetRemovePortIds returns the RemovePortIds field value if set, zero value otherwise.
func (o *LoadBalancerUpdate) GetRemovePortIds() []string {
	if o == nil || IsNil(o.RemovePortIds) {
		var ret []string
		return ret
	}
	return o.RemovePortIds
}

// GetRemovePortIdsOk returns a tuple with the RemovePortIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerUpdate) GetRemovePortIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.RemovePortIds) {
		return nil, false
	}
	return o.RemovePortIds, true
}

// HasRemovePortIds returns a boolean if a field has been set.
func (o *LoadBalancerUpdate) HasRemovePortIds() bool {
	if o != nil && !IsNil(o.RemovePortIds) {
		return true
	}

	return false
}

// SetRemovePortIds gets a reference to the given []string and assigns it to the RemovePortIds field.
func (o *LoadBalancerUpdate) SetRemovePortIds(v []string) {
	o.RemovePortIds = v
}

// GetClearPorts returns the ClearPorts field value if set, zero value otherwise.
func (o *LoadBalancerUpdate) GetClearPorts() bool {
	if o == nil || IsNil(o.ClearPorts) {
		var ret bool
		return ret
	}
	return *o.ClearPorts
}

// GetClearPortsOk returns a tuple with the ClearPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerUpdate) GetClearPortsOk() (*bool, bool) {
	if o == nil || IsNil(o.ClearPorts) {
		return nil, false
	}
	return o.ClearPorts, true
}

// HasClearPorts returns a boolean if a field has been set.
func (o *LoadBalancerUpdate) HasClearPorts() bool {
	if o != nil && !IsNil(o.ClearPorts) {
		return true
	}

	return false
}

// SetClearPorts gets a reference to the given bool and assigns it to the ClearPorts field.
func (o *LoadBalancerUpdate) SetClearPorts(v bool) {
	o.ClearPorts = &v
}

func (o LoadBalancerUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadBalancerUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AddPortIds) {
		toSerialize["add_port_ids"] = o.AddPortIds
	}
	if !IsNil(o.RemovePortIds) {
		toSerialize["remove_port_ids"] = o.RemovePortIds
	}
	if !IsNil(o.ClearPorts) {
		toSerialize["clear_ports"] = o.ClearPorts
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LoadBalancerUpdate) UnmarshalJSON(bytes []byte) (err error) {
	varLoadBalancerUpdate := _LoadBalancerUpdate{}

	err = json.Unmarshal(bytes, &varLoadBalancerUpdate)

	if err != nil {
		return err
	}

	*o = LoadBalancerUpdate(varLoadBalancerUpdate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "add_port_ids")
		delete(additionalProperties, "remove_port_ids")
		delete(additionalProperties, "clear_ports")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLoadBalancerUpdate struct {
	value *LoadBalancerUpdate
	isSet bool
}

func (v NullableLoadBalancerUpdate) Get() *LoadBalancerUpdate {
	return v.value
}

func (v *NullableLoadBalancerUpdate) Set(val *LoadBalancerUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadBalancerUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadBalancerUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadBalancerUpdate(val *LoadBalancerUpdate) *NullableLoadBalancerUpdate {
	return &NullableLoadBalancerUpdate{value: val, isSet: true}
}

func (v NullableLoadBalancerUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadBalancerUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
